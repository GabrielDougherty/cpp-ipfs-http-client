language: cpp

dist: focal
sudo: required

# Only trigger build on master branch (but still build all pull requests in Travis)
branches:
  only:
  - master

install:
  # TRAVIS_BUILD_DIR is set to where the source code is checked
  # out (ie it assumes in-source build)
  - GO_IPFS_DOWNLOAD_URL="https://dist.ipfs.io/go-ipfs/v0.7.0/go-ipfs_v0.7.0_linux-amd64.tar.gz"
  - GO_IPFS_DIR="${TRAVIS_BUILD_DIR}/../go-ipfs"
  - GO_IPFS_ARCHIVE_FULLPATH="${GO_IPFS_DIR}/go-ipfs.tar.gz"
  - GO_IPFS_CMD_BASENAME="ipfs"
  - GO_IPFS_CMD="${GO_IPFS_DIR}/go-ipfs/${GO_IPFS_CMD_BASENAME}"
  # Remove explicit now
  - rm -rf "${GO_IPFS_DIR}"
  - |
    if [ -e "${GO_IPFS_ARCHIVE_FULLPATH}" ] ; then
      echo "${GO_IPFS_ARCHIVE_FULLPATH} exists, not downloading"
    else
      echo "${GO_IPFS_ARCHIVE_FULLPATH} does not exist, downloading"
      mkdir -p "${GO_IPFS_DIR}"
      travis_retry wget --quiet -O "${GO_IPFS_ARCHIVE_FULLPATH}" "${GO_IPFS_DOWNLOAD_URL}"
    fi
  # TODO: Check on IPFS version, and determ if we want to keep it or download the newer version instead on the runner
  - |
    if [ -x "${GO_IPFS_CMD}" ] ; then
      echo "${GO_IPFS_CMD} is present, not extracting"
    else
      echo "${GO_IPFS_CMD} is not present, extracting"
      tar -C "${GO_IPFS_DIR}" -vzxf "${GO_IPFS_ARCHIVE_FULLPATH}"
      rm -rf "${GO_IPFS_ARCHIVE_FULLPATH}"
    fi

cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/../go-ipfs

matrix:
  include:
    - os: linux
      before_install:
        - curl https://apt.llvm.org/llvm-snapshot.gpg.key |sudo apt-key add -
        - sudo add-apt-repository -y "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main"
        - sudo apt-get update -qq
        - sudo apt-get install -y clang-tools-10
      compiler: clang
      env:
        - TAG="Compile with clang 10 in Release mode"
        - CXX_=clang++-10
        - CMAKE_EXTRA_ARGS_="-DCMAKE_BUILD_TYPE=Release"
    - os: linux
      before_install:
        - curl https://apt.llvm.org/llvm-snapshot.gpg.key |sudo apt-key add -
        - sudo add-apt-repository -y "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main"
        - sudo apt-get update -qq
        - sudo apt-get install -y clang-tools-10
      compiler: clang
      env:
        - TAG="Compile with clang 10 and run tests"
        - CXX_=clang++-10
      after_success:
        - "${TRAVIS_BUILD_DIR}/scripts/ipfs_daemon_start.sh"
        - OK="no"
        - travis_wait 30 ctest -R '^test_' --output-on-failure && OK="yes"
        - "${TRAVIS_BUILD_DIR}/scripts/ipfs_daemon_stop.sh"
        - test "${OK}" = "yes"
    - os: linux
      before_install:
        - curl https://apt.llvm.org/llvm-snapshot.gpg.key |sudo apt-key add -
        - sudo add-apt-repository -y "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main"
        - sudo apt-get update -qq
        - sudo apt-get install -y clang-tools-10
      compiler: clang
      env:
        - TAG="Static analysis with scan-build 10"
      script:
        - cmake --version
        - SOURCE_DIR="${TRAVIS_BUILD_DIR}"
        - BUILD_DIR="${TRAVIS_BUILD_DIR}/../build"
        - mkdir -p "${BUILD_DIR}"
        - cd "${BUILD_DIR}"
        - CCC_CXX=clang++-10 scan-build-10 --status-bugs cmake -DBUILD_SHARED_LIBS:BOOL=ON "${SOURCE_DIR}"
        - CCC_CXX=clang++-10 scan-build-10 --status-bugs make VERBOSE=1
    - os: linux
      before_install:
        - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        - sudo apt-get update -qq
        - sudo apt-get install -y g++-10
      compiler: gcc
      env:
        - TAG="Compile with gcc 10"
        - CXX_=g++-10
    - os: linux
      before_install:
        - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        - sudo apt-get update -qq
        - sudo apt-get install -y g++-9
        - pip install --user cpp-coveralls
      compiler: gcc
      env:
        - TAG="Compile with gcc 9 and assess coverage"
        - CXX_=g++-9
        - CXXFLAGS="-g -O0 --coverage"
        - LDFLAGS="-g -O0 --coverage"
      script:
        - cmake --version
        - CXX=${CXX_:-${CXX}}
        - ${CXX} --version
        - SOURCE_DIR="${TRAVIS_BUILD_DIR}"
        - BUILD_DIR="${TRAVIS_BUILD_DIR}"
        - mkdir -p "${BUILD_DIR}"
        - cd "${BUILD_DIR}"
        - echo "CXXFLAGS='${CXXFLAGS}' LDFLAGS='${LDFLAGS}'"
        - cmake -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_BUILD_TYPE=Debug "${SOURCE_DIR}"
        - make VERBOSE=1
        - "${TRAVIS_BUILD_DIR}/scripts/ipfs_daemon_start.sh"
        - OK="no"
        - travis_wait 30 make test ARGS="--output-on-failure -R '^test_'" && OK="yes"
        - "${TRAVIS_BUILD_DIR}/scripts/ipfs_daemon_stop.sh"
        - |
          if [ "${OK}" = "yes" ] ; then
            echo "Tests passed, gathering coverage statistics"
            coveralls --verbose --exclude "`find ./ -name CMakeCXXCompilerId.cpp`" --exclude "`find ./ -name feature_tests.cxx`" --exclude "test" --exclude "_deps" --exclude "include/ipfs/test/utils.h" --gcov gcov-9 --gcov-options '\-lp' --repo-token hfT2FIRhKeMMqAVnEmUxGSu36wUwnpa0V
          else
            echo "Tests failed, not gathering coverage statistics"
          fi
        - test "${OK}" = "yes"
    - os: osx
      osx_image: xcode10
      env:
        - TAG="OSX xcode 10"

script:
  - cmake --version
  - CXX=${CXX_:-${CXX}}
  - ${CXX} --version
  - SOURCE_DIR="${TRAVIS_BUILD_DIR}"
  - BUILD_DIR="${TRAVIS_BUILD_DIR}/../build"
  - mkdir -p "${BUILD_DIR}"
  - cd "${BUILD_DIR}"
  - echo "CXXFLAGS='${CXXFLAGS}' LDFLAGS='${LDFLAGS}'"
  - cmake -DBUILD_SHARED_LIBS:BOOL=ON "${CMAKE_EXTRA_ARGS_}" "${SOURCE_DIR}"
  - make VERBOSE=1
